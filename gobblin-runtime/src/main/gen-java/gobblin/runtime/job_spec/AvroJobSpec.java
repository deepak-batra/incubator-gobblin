/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package gobblin.runtime.job_spec;

import org.apache.avro.specific.SpecificData;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class AvroJobSpec extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 3635637624491863253L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"AvroJobSpec\",\"namespace\":\"gobblin.runtime.job_spec\",\"fields\":[{\"name\":\"uri\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"A URI identifying the job.\"},{\"name\":\"version\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"The implementation-defined version of this spec.\",\"default\":\"\"},{\"name\":\"description\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"Human-readable description of the job spec.\",\"default\":\"\"},{\"name\":\"templateUri\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"URI of job template to use.\",\"default\":\"\"},{\"name\":\"properties\",\"type\":{\"type\":\"map\",\"values\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"avro.java.string\":\"String\"},\"doc\":\"Job config as a properties collection.\",\"default\":{}},{\"name\":\"metadata\",\"type\":{\"type\":\"map\",\"values\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"avro.java.string\":\"String\"},\"doc\":\"separate metadata so that properties is not polluted\",\"default\":{}}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  /** A URI identifying the job. */
  @Deprecated public java.lang.String uri;
  /** The implementation-defined version of this spec. */
  @Deprecated public java.lang.String version;
  /** Human-readable description of the job spec. */
  @Deprecated public java.lang.String description;
  /** URI of job template to use. */
  @Deprecated public java.lang.String templateUri;
  /** Job config as a properties collection. */
  @Deprecated public java.util.Map<java.lang.String,java.lang.String> properties;
  /** separate metadata so that properties is not polluted */
  @Deprecated public java.util.Map<java.lang.String,java.lang.String> metadata;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public AvroJobSpec() {}

  /**
   * All-args constructor.
   * @param uri A URI identifying the job.
   * @param version The implementation-defined version of this spec.
   * @param description Human-readable description of the job spec.
   * @param templateUri URI of job template to use.
   * @param properties Job config as a properties collection.
   * @param metadata separate metadata so that properties is not polluted
   */
  public AvroJobSpec(java.lang.String uri, java.lang.String version, java.lang.String description, java.lang.String templateUri, java.util.Map<java.lang.String,java.lang.String> properties, java.util.Map<java.lang.String,java.lang.String> metadata) {
    this.uri = uri;
    this.version = version;
    this.description = description;
    this.templateUri = templateUri;
    this.properties = properties;
    this.metadata = metadata;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return uri;
    case 1: return version;
    case 2: return description;
    case 3: return templateUri;
    case 4: return properties;
    case 5: return metadata;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: uri = (java.lang.String)value$; break;
    case 1: version = (java.lang.String)value$; break;
    case 2: description = (java.lang.String)value$; break;
    case 3: templateUri = (java.lang.String)value$; break;
    case 4: properties = (java.util.Map<java.lang.String,java.lang.String>)value$; break;
    case 5: metadata = (java.util.Map<java.lang.String,java.lang.String>)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'uri' field.
   * @return A URI identifying the job.
   */
  public java.lang.String getUri() {
    return uri;
  }

  /**
   * Sets the value of the 'uri' field.
   * A URI identifying the job.
   * @param value the value to set.
   */
  public void setUri(java.lang.String value) {
    this.uri = value;
  }

  /**
   * Gets the value of the 'version' field.
   * @return The implementation-defined version of this spec.
   */
  public java.lang.String getVersion() {
    return version;
  }

  /**
   * Sets the value of the 'version' field.
   * The implementation-defined version of this spec.
   * @param value the value to set.
   */
  public void setVersion(java.lang.String value) {
    this.version = value;
  }

  /**
   * Gets the value of the 'description' field.
   * @return Human-readable description of the job spec.
   */
  public java.lang.String getDescription() {
    return description;
  }

  /**
   * Sets the value of the 'description' field.
   * Human-readable description of the job spec.
   * @param value the value to set.
   */
  public void setDescription(java.lang.String value) {
    this.description = value;
  }

  /**
   * Gets the value of the 'templateUri' field.
   * @return URI of job template to use.
   */
  public java.lang.String getTemplateUri() {
    return templateUri;
  }

  /**
   * Sets the value of the 'templateUri' field.
   * URI of job template to use.
   * @param value the value to set.
   */
  public void setTemplateUri(java.lang.String value) {
    this.templateUri = value;
  }

  /**
   * Gets the value of the 'properties' field.
   * @return Job config as a properties collection.
   */
  public java.util.Map<java.lang.String,java.lang.String> getProperties() {
    return properties;
  }

  /**
   * Sets the value of the 'properties' field.
   * Job config as a properties collection.
   * @param value the value to set.
   */
  public void setProperties(java.util.Map<java.lang.String,java.lang.String> value) {
    this.properties = value;
  }

  /**
   * Gets the value of the 'metadata' field.
   * @return separate metadata so that properties is not polluted
   */
  public java.util.Map<java.lang.String,java.lang.String> getMetadata() {
    return metadata;
  }

  /**
   * Sets the value of the 'metadata' field.
   * separate metadata so that properties is not polluted
   * @param value the value to set.
   */
  public void setMetadata(java.util.Map<java.lang.String,java.lang.String> value) {
    this.metadata = value;
  }

  /**
   * Creates a new AvroJobSpec RecordBuilder.
   * @return A new AvroJobSpec RecordBuilder
   */
  public static gobblin.runtime.job_spec.AvroJobSpec.Builder newBuilder() {
    return new gobblin.runtime.job_spec.AvroJobSpec.Builder();
  }

  /**
   * Creates a new AvroJobSpec RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new AvroJobSpec RecordBuilder
   */
  public static gobblin.runtime.job_spec.AvroJobSpec.Builder newBuilder(gobblin.runtime.job_spec.AvroJobSpec.Builder other) {
    return new gobblin.runtime.job_spec.AvroJobSpec.Builder(other);
  }

  /**
   * Creates a new AvroJobSpec RecordBuilder by copying an existing AvroJobSpec instance.
   * @param other The existing instance to copy.
   * @return A new AvroJobSpec RecordBuilder
   */
  public static gobblin.runtime.job_spec.AvroJobSpec.Builder newBuilder(gobblin.runtime.job_spec.AvroJobSpec other) {
    return new gobblin.runtime.job_spec.AvroJobSpec.Builder(other);
  }

  /**
   * RecordBuilder for AvroJobSpec instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<AvroJobSpec>
    implements org.apache.avro.data.RecordBuilder<AvroJobSpec> {

    /** A URI identifying the job. */
    private java.lang.String uri;
    /** The implementation-defined version of this spec. */
    private java.lang.String version;
    /** Human-readable description of the job spec. */
    private java.lang.String description;
    /** URI of job template to use. */
    private java.lang.String templateUri;
    /** Job config as a properties collection. */
    private java.util.Map<java.lang.String,java.lang.String> properties;
    /** separate metadata so that properties is not polluted */
    private java.util.Map<java.lang.String,java.lang.String> metadata;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(gobblin.runtime.job_spec.AvroJobSpec.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.uri)) {
        this.uri = data().deepCopy(fields()[0].schema(), other.uri);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.version)) {
        this.version = data().deepCopy(fields()[1].schema(), other.version);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.description)) {
        this.description = data().deepCopy(fields()[2].schema(), other.description);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.templateUri)) {
        this.templateUri = data().deepCopy(fields()[3].schema(), other.templateUri);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.properties)) {
        this.properties = data().deepCopy(fields()[4].schema(), other.properties);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.metadata)) {
        this.metadata = data().deepCopy(fields()[5].schema(), other.metadata);
        fieldSetFlags()[5] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing AvroJobSpec instance
     * @param other The existing instance to copy.
     */
    private Builder(gobblin.runtime.job_spec.AvroJobSpec other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.uri)) {
        this.uri = data().deepCopy(fields()[0].schema(), other.uri);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.version)) {
        this.version = data().deepCopy(fields()[1].schema(), other.version);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.description)) {
        this.description = data().deepCopy(fields()[2].schema(), other.description);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.templateUri)) {
        this.templateUri = data().deepCopy(fields()[3].schema(), other.templateUri);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.properties)) {
        this.properties = data().deepCopy(fields()[4].schema(), other.properties);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.metadata)) {
        this.metadata = data().deepCopy(fields()[5].schema(), other.metadata);
        fieldSetFlags()[5] = true;
      }
    }

    /**
      * Gets the value of the 'uri' field.
      * A URI identifying the job.
      * @return The value.
      */
    public java.lang.String getUri() {
      return uri;
    }

    /**
      * Sets the value of the 'uri' field.
      * A URI identifying the job.
      * @param value The value of 'uri'.
      * @return This builder.
      */
    public gobblin.runtime.job_spec.AvroJobSpec.Builder setUri(java.lang.String value) {
      validate(fields()[0], value);
      this.uri = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'uri' field has been set.
      * A URI identifying the job.
      * @return True if the 'uri' field has been set, false otherwise.
      */
    public boolean hasUri() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'uri' field.
      * A URI identifying the job.
      * @return This builder.
      */
    public gobblin.runtime.job_spec.AvroJobSpec.Builder clearUri() {
      uri = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'version' field.
      * The implementation-defined version of this spec.
      * @return The value.
      */
    public java.lang.String getVersion() {
      return version;
    }

    /**
      * Sets the value of the 'version' field.
      * The implementation-defined version of this spec.
      * @param value The value of 'version'.
      * @return This builder.
      */
    public gobblin.runtime.job_spec.AvroJobSpec.Builder setVersion(java.lang.String value) {
      validate(fields()[1], value);
      this.version = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'version' field has been set.
      * The implementation-defined version of this spec.
      * @return True if the 'version' field has been set, false otherwise.
      */
    public boolean hasVersion() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'version' field.
      * The implementation-defined version of this spec.
      * @return This builder.
      */
    public gobblin.runtime.job_spec.AvroJobSpec.Builder clearVersion() {
      version = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'description' field.
      * Human-readable description of the job spec.
      * @return The value.
      */
    public java.lang.String getDescription() {
      return description;
    }

    /**
      * Sets the value of the 'description' field.
      * Human-readable description of the job spec.
      * @param value The value of 'description'.
      * @return This builder.
      */
    public gobblin.runtime.job_spec.AvroJobSpec.Builder setDescription(java.lang.String value) {
      validate(fields()[2], value);
      this.description = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'description' field has been set.
      * Human-readable description of the job spec.
      * @return True if the 'description' field has been set, false otherwise.
      */
    public boolean hasDescription() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'description' field.
      * Human-readable description of the job spec.
      * @return This builder.
      */
    public gobblin.runtime.job_spec.AvroJobSpec.Builder clearDescription() {
      description = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'templateUri' field.
      * URI of job template to use.
      * @return The value.
      */
    public java.lang.String getTemplateUri() {
      return templateUri;
    }

    /**
      * Sets the value of the 'templateUri' field.
      * URI of job template to use.
      * @param value The value of 'templateUri'.
      * @return This builder.
      */
    public gobblin.runtime.job_spec.AvroJobSpec.Builder setTemplateUri(java.lang.String value) {
      validate(fields()[3], value);
      this.templateUri = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'templateUri' field has been set.
      * URI of job template to use.
      * @return True if the 'templateUri' field has been set, false otherwise.
      */
    public boolean hasTemplateUri() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'templateUri' field.
      * URI of job template to use.
      * @return This builder.
      */
    public gobblin.runtime.job_spec.AvroJobSpec.Builder clearTemplateUri() {
      templateUri = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'properties' field.
      * Job config as a properties collection.
      * @return The value.
      */
    public java.util.Map<java.lang.String,java.lang.String> getProperties() {
      return properties;
    }

    /**
      * Sets the value of the 'properties' field.
      * Job config as a properties collection.
      * @param value The value of 'properties'.
      * @return This builder.
      */
    public gobblin.runtime.job_spec.AvroJobSpec.Builder setProperties(java.util.Map<java.lang.String,java.lang.String> value) {
      validate(fields()[4], value);
      this.properties = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'properties' field has been set.
      * Job config as a properties collection.
      * @return True if the 'properties' field has been set, false otherwise.
      */
    public boolean hasProperties() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'properties' field.
      * Job config as a properties collection.
      * @return This builder.
      */
    public gobblin.runtime.job_spec.AvroJobSpec.Builder clearProperties() {
      properties = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'metadata' field.
      * separate metadata so that properties is not polluted
      * @return The value.
      */
    public java.util.Map<java.lang.String,java.lang.String> getMetadata() {
      return metadata;
    }

    /**
      * Sets the value of the 'metadata' field.
      * separate metadata so that properties is not polluted
      * @param value The value of 'metadata'.
      * @return This builder.
      */
    public gobblin.runtime.job_spec.AvroJobSpec.Builder setMetadata(java.util.Map<java.lang.String,java.lang.String> value) {
      validate(fields()[5], value);
      this.metadata = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'metadata' field has been set.
      * separate metadata so that properties is not polluted
      * @return True if the 'metadata' field has been set, false otherwise.
      */
    public boolean hasMetadata() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'metadata' field.
      * separate metadata so that properties is not polluted
      * @return This builder.
      */
    public gobblin.runtime.job_spec.AvroJobSpec.Builder clearMetadata() {
      metadata = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    @Override
    public AvroJobSpec build() {
      try {
        AvroJobSpec record = new AvroJobSpec();
        record.uri = fieldSetFlags()[0] ? this.uri : (java.lang.String) defaultValue(fields()[0]);
        record.version = fieldSetFlags()[1] ? this.version : (java.lang.String) defaultValue(fields()[1]);
        record.description = fieldSetFlags()[2] ? this.description : (java.lang.String) defaultValue(fields()[2]);
        record.templateUri = fieldSetFlags()[3] ? this.templateUri : (java.lang.String) defaultValue(fields()[3]);
        record.properties = fieldSetFlags()[4] ? this.properties : (java.util.Map<java.lang.String,java.lang.String>) defaultValue(fields()[4]);
        record.metadata = fieldSetFlags()[5] ? this.metadata : (java.util.Map<java.lang.String,java.lang.String>) defaultValue(fields()[5]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  private static final org.apache.avro.io.DatumWriter
    WRITER$ = new org.apache.avro.specific.SpecificDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  private static final org.apache.avro.io.DatumReader
    READER$ = new org.apache.avro.specific.SpecificDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
